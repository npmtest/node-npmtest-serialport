{"/home/travis/build/npmtest/node-npmtest-serialport/test.js":"/* istanbul instrument in package npmtest_serialport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-serialport/lib.npmtest_serialport.js":"/* istanbul instrument in package npmtest_serialport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_serialport = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_serialport = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-serialport/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-serialport && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_serialport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_serialport\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_serialport.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_serialport.rollup.js'] =\n            local.assetsDict['/assets.npmtest_serialport.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_serialport.__dirname + '/lib.npmtest_serialport.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-serialport/node_modules/serialport/lib/serialport.js":"'use strict';\n\n// Copyright 2011 Chris Williams <chris@iterativedesigns.com>\n\n// 3rd Party Dependencies\nvar debug = require('debug')('serialport');\n\n// shims\nvar assign = require('object.assign').getPolyfill();\n\n// Internal Dependencies\nvar SerialPortBinding = require('./bindings');\nvar parsers = require('./parsers');\n\n// Built-ins Dependencies\nvar fs = require('fs');\nvar stream = require('stream');\nvar util = require('util');\n\n//  VALIDATION ARRAYS\nvar DATABITS = [5, 6, 7, 8];\nvar STOPBITS = [1, 1.5, 2];\nvar PARITY = ['none', 'even', 'mark', 'odd', 'space'];\nvar FLOWCONTROLS = ['xon', 'xoff', 'xany', 'rtscts'];\nvar SET_OPTIONS = ['brk', 'cts', 'dtr', 'dts', 'rts'];\n\n// Stuff from ReadStream, refactored for our usage:\nvar kPoolSize = 40 * 1024;\nvar kMinPoolSpace = 128;\n\nvar defaultSettings = {\n  baudRate: 9600,\n  autoOpen: true,\n  parity: 'none',\n  xon: false,\n  xoff: false,\n  xany: false,\n  rtscts: false,\n  hupcl: true,\n  dataBits: 8,\n  stopBits: 1,\n  bufferSize: 64 * 1024,\n  lock: true,\n  parser: parsers.raw,\n  platformOptions: SerialPortBinding.platformOptions\n};\n\nvar defaultSetFlags = {\n  brk: false,\n  cts: false,\n  dtr: true,\n  dts: false,\n  rts: true\n};\n\n// deprecate the lowercase version of these options next major release\nvar LOWERCASE_OPTIONS = [\n  'baudRate',\n  'dataBits',\n  'stopBits',\n  'bufferSize',\n  'platformOptions'\n];\n\nfunction correctOptions(options) {\n  LOWERCASE_OPTIONS.forEach(function(name) {\n    var lowerName = name.toLowerCase();\n    if (options.hasOwnProperty(lowerName)) {\n      var value = options[lowerName];\n      delete options[lowerName];\n      options[name] = value;\n    }\n  });\n  return options;\n}\n\nfunction SerialPort(path, options, callback) {\n  if (typeof callback === 'boolean') {\n    throw new TypeError('`openImmediately` is now called `autoOpen` and is a property of options');\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  stream.Stream.call(this);\n\n  if (!path) {\n    throw new TypeError('No path specified');\n  }\n\n  this.path = path;\n\n  var correctedOptions = correctOptions(options);\n  var settings = assign({}, defaultSettings, correctedOptions);\n\n  if (typeof settings.baudRate !== 'number') {\n    throw new TypeError('Invalid \"baudRate\" must be a number got: ' + settings.baudRate);\n  }\n\n  if (DATABITS.indexOf(settings.dataBits) === -1) {\n    throw new TypeError('Invalid \"databits\": ' + settings.dataBits);\n  }\n\n  if (STOPBITS.indexOf(settings.stopBits) === -1) {\n    throw new TypeError('Invalid \"stopbits\": ' + settings.stopbits);\n  }\n\n  if (PARITY.indexOf(settings.parity) === -1) {\n    throw new TypeError('Invalid \"parity\": ' + settings.parity);\n  }\n\n  FLOWCONTROLS.forEach(function(control) {\n    if (typeof settings[control] !== 'boolean') {\n      throw new TypeError('Invalid \"' + control + '\" is not boolean');\n    }\n  });\n\n  settings.disconnectedCallback = this._disconnected.bind(this);\n  settings.dataCallback = settings.parser.bind(this, this);\n\n  this.fd = null;\n  this.paused = true;\n  this.opening = false;\n  this.closing = false;\n\n  if (process.platform !== 'win32') {\n    this.bufferSize = settings.bufferSize;\n    this.readable = true;\n    this.reading = false;\n  }\n\n  this.options = settings;\n\n  if (this.options.autoOpen) {\n    // is nextTick necessary?\n    process.nextTick(this.open.bind(this, callback));\n  }\n}\n\nutil.inherits(SerialPort, stream.Stream);\n\nSerialPort.prototype._error = function(error, callback) {\n  if (callback) {\n    callback.call(this, error);\n  } else {\n    this.emit('error', error);\n  }\n};\n\nSerialPort.prototype.open = function(callback) {\n  if (this.isOpen()) {\n    return this._error(new Error('Port is already open'), callback);\n  }\n\n  if (this.opening) {\n    return this._error(new Error('Port is opening'), callback);\n  }\n\n  this.paused = true;\n  this.readable = true;\n  this.reading = false;\n  this.opening = true;\n\n  SerialPortBinding.open(this.path, this.options, function(err, fd) {\n    this.opening = false;\n    if (err) {\n      debug('SerialPortBinding.open had an error', err);\n      return this._error(err, callback);\n    }\n    this.fd = fd;\n    this.paused = false;\n\n    if (process.platform !== 'win32') {\n      this.serialPoller = new SerialPortBinding.SerialportPoller(this.fd, function(err) {\n        if (!err) {\n          this._read();\n        } else {\n          this._disconnected(err);\n        }\n      }.bind(this));\n      this.serialPoller.start();\n    }\n\n    this.emit('open');\n    if (callback) { callback.call(this, null) }\n  }.bind(this));\n};\n\nSerialPort.prototype.update = function(options, callback) {\n  if (!this.isOpen()) {\n    debug('update attempted, but port is not open');\n    return this._error(new Error('Port is not open'), callback);\n  }\n\n  var correctedOptions = correctOptions(options);\n  var settings = assign({}, defaultSettings, correctedOptions);\n  this.options.baudRate = settings.baudRate;\n\n  SerialPortBinding.update(this.fd, this.options, function(err) {\n    if (err) {\n      return this._error(err, callback);\n    }\n    if (callback) { callback.call(this, null) }\n  }.bind(this));\n};\n\nSerialPort.prototype.isOpen = function() {\n  return this.fd !== null && !this.closing;\n};\n\nSerialPort.prototype.write = function(buffer, callback) {\n  if (!this.isOpen()) {\n    debug('write attempted, but port is not open');\n    return this._error(new Error('Port is not open'), callback);\n  }\n\n  if (!Buffer.isBuffer(buffer)) {\n    buffer = new Buffer(buffer);\n  }\n\n  debug('write ' + buffer.length + ' bytes of data');\n  SerialPortBinding.write(this.fd, buffer, function(err) {\n    if (err) {\n      debug('SerialPortBinding.write had an error', err);\n      return this._error(err, callback);\n    }\n    if (callback) { callback.call(this, null) }\n  }.bind(this));\n};\n\nif (process.platform !== 'win32') {\n  SerialPort.prototype._read = function() {\n    if (!this.readable || this.paused || this.reading || this.closing) {\n      return;\n    }\n\n    this.reading = true;\n\n    if (!this.pool || this.pool.length - this.pool.used < kMinPoolSpace) {\n      // discard the old pool. Can't add to the free list because\n      // users might have references to slices on it.\n      this.pool = new Buffer(kPoolSize);\n      this.pool.used = 0;\n    }\n\n    // Grab another reference to the pool in the case that while we're in the\n    // thread pool another read() finishes up the pool, and allocates a new\n    // one.\n    var toRead = Math.min(this.pool.length - this.pool.used, ~~this.bufferSize);\n    var start = this.pool.used;\n\n    var _afterRead = function(err, bytesRead, readPool, bytesRequested) {\n      this.reading = false;\n      if (err) {\n        if (err.code && err.code === 'EAGAIN') {\n          if (this.isOpen()) {\n            this.serialPoller.start();\n          }\n        // handle edge case were mac/unix doesn't clearly know the error.\n        } else if (err.code && (err.code === 'EBADF' || err.code === 'ENXIO' || (err.errno === -1 || err.code === 'UNKNOWN'))) {\n          this._disconnected(err);\n        } else {\n          this.fd = null;\n          this.readable = false;\n          this.emit('error', err);\n        }\n        return;\n      }\n\n      // Since we will often not read the number of bytes requested,\n      // let's mark the ones we didn't need as available again.\n      this.pool.used -= bytesRequested - bytesRead;\n\n      if (bytesRead === 0) {\n        if (this.isOpen()) {\n          this.serialPoller.start();\n        }\n      } else {\n        var b = this.pool.slice(start, start + bytesRead);\n\n        // do not emit events if the stream is paused\n        if (this.paused) {\n          if (!this.buffer) {\n            this.buffer = new Buffer(0);\n          }\n          this.buffer = Buffer.concat([this.buffer, b]);\n          return;\n        }\n        this._emitData(b);\n\n        // do not emit events anymore after we declared the stream unreadable\n        if (!this.readable) {\n          return;\n        }\n        this._read();\n      }\n    }.bind(this);\n\n    fs.read(this.fd, this.pool, this.pool.used, toRead, null, function(err, bytesRead) {\n      var readPool = this.pool;\n      var bytesRequested = toRead;\n      _afterRead(err, bytesRead, readPool, bytesRequested);\n    }.bind(this));\n\n    this.pool.used += toRead;\n  };\n\n  SerialPort.prototype._emitData = function(data) {\n    this.options.dataCallback(data);\n  };\n\n  SerialPort.prototype.pause = function() {\n    this.paused = true;\n  };\n\n  SerialPort.prototype.resume = function() {\n    this.paused = false;\n\n    if (this.buffer) {\n      var buffer = this.buffer;\n      this.buffer = null;\n      this._emitData(buffer);\n    }\n\n    // No longer open?\n    if (!this.isOpen()) {\n      return;\n    }\n\n    this._read();\n  };\n} // if !'win32'\n\nSerialPort.prototype._disconnected = function(err) {\n  this.paused = true;\n  this.emit('disconnect', err);\n  if (this.closing) {\n    return;\n  }\n\n  if (this.fd === null) {\n    return;\n  }\n\n  this.closing = true;\n  if (process.platform !== 'win32') {\n    this.readable = false;\n    this.serialPoller.close();\n  }\n\n  SerialPortBinding.close(this.fd, function(err) {\n    this.closing = false;\n    if (err) {\n      debug('Disconnect close completed with error: ', err);\n    }\n    this.fd = null;\n    this.emit('close');\n  }.bind(this));\n};\n\nSerialPort.prototype.close = function(callback) {\n  this.paused = true;\n\n  if (this.closing) {\n    debug('close attempted, but port is already closing');\n    return this._error(new Error('Port is not open'), callback);\n  }\n\n  if (!this.isOpen()) {\n    debug('close attempted, but port is not open');\n    return this._error(new Error('Port is not open'), callback);\n  }\n\n  this.closing = true;\n\n  // Stop polling before closing the port.\n  if (process.platform !== 'win32') {\n    this.readable = false;\n    this.serialPoller.close();\n  }\n  SerialPortBinding.close(this.fd, function(err) {\n    this.closing = false;\n    if (err) {\n      debug('SerialPortBinding.close had an error', err);\n      return this._error(err, callback);\n    }\n\n    this.fd = null;\n    this.emit('close');\n    if (callback) { callback.call(this, null) }\n  }.bind(this));\n};\n\nSerialPort.prototype.flush = function(callback) {\n  if (!this.isOpen()) {\n    debug('flush attempted, but port is not open');\n    return this._error(new Error('Port is not open'), callback);\n  }\n\n  SerialPortBinding.flush(this.fd, function(err, result) {\n    if (err) {\n      debug('SerialPortBinding.flush had an error', err);\n      return this._error(err, callback);\n    }\n    if (callback) { callback.call(this, null, result) }\n  }.bind(this));\n};\n\nSerialPort.prototype.set = function(options, callback) {\n  if (!this.isOpen()) {\n    debug('set attempted, but port is not open');\n    return this._error(new Error('Port is not open'), callback);\n  }\n\n  options = options || {};\n  if (!callback && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var settings = {};\n  for (var i = SET_OPTIONS.length - 1; i >= 0; i--) {\n    var flag = SET_OPTIONS[i];\n    if (options[flag] !== undefined) {\n      settings[flag] = options[flag];\n    } else {\n      settings[flag] = defaultSetFlags[flag];\n    }\n  }\n\n  SerialPortBinding.set(this.fd, settings, function(err) {\n    if (err) {\n      debug('SerialPortBinding.set had an error', err);\n      return this._error(err, callback);\n    }\n    if (callback) { callback.call(this, null) }\n  }.bind(this));\n};\n\nSerialPort.prototype.drain = function(callback) {\n  if (!this.isOpen()) {\n    debug('drain attempted, but port is not open');\n    return this._error(new Error('Port is not open'), callback);\n  }\n\n  SerialPortBinding.drain(this.fd, function(err) {\n    if (err) {\n      debug('SerialPortBinding.drain had an error', err);\n      return this._error(err, callback);\n    }\n    if (callback) { callback.call(this, null) }\n  }.bind(this));\n};\n\nSerialPort.parsers = parsers;\nSerialPort.list = SerialPortBinding.list;\n\n// Write a depreciation warning once\nObject.defineProperty(SerialPort, 'SerialPort', {\n  get: function() {\n    console.warn('DEPRECATION: Please use `require(\\'serialport\\')` instead of `require(\\'serialport\\').SerialPort`');\n    Object.defineProperty(SerialPort, 'SerialPort', {\n      value: SerialPort\n    });\n    return SerialPort;\n  },\n  configurable: true\n});\n\nmodule.exports = SerialPort;\n","/home/travis/build/npmtest/node-npmtest-serialport/node_modules/serialport/lib/bindings.js":"'use strict';\n\nvar bindings = require('bindings')('serialport.node');\nvar listUnix = require('./list-unix');\n\nvar linux = process.platform !== 'win32' && process.platform !== 'darwin';\n\nfunction listLinux(callback) {\n  callback = callback || function(err) {\n    if (err) { this.emit('error', err) }\n  }.bind(this);\n  return listUnix(callback);\n};\n\nvar platformOptions = {};\nif (process.platform !== 'win32') {\n  platformOptions = {\n    vmin: 1,\n    vtime: 0\n  };\n}\n\nmodule.exports = {\n  close: bindings.close,\n  drain: bindings.drain,\n  flush: bindings.flush,\n  list: linux ? listLinux : bindings.list,\n  open: bindings.open,\n  SerialportPoller: bindings.SerialportPoller,\n  set: bindings.set,\n  update: bindings.update,\n  write: bindings.write,\n  platformOptions: platformOptions\n};\n","/home/travis/build/npmtest/node-npmtest-serialport/node_modules/serialport/lib/list-unix.js":"'use strict';\n\nrequire('lie/polyfill');\nvar childProcess = require('child_process');\nvar fs = require('fs');\nvar path = require('path');\n\nfunction promisify(func) {\n  return function(arg) {\n    return new Promise(function(resolve, reject) {\n      func(arg, function(err, data) {\n        if (err) {\n          return reject(err);\n        }\n        resolve(data);\n      });\n    });\n  };\n}\n\nfunction promisedFilter(func) {\n  return function(data) {\n    var shouldKeep = data.map(func);\n    return Promise.all(shouldKeep).then(function(keep) {\n      return data.filter(function(path, index) {\n        return keep[index];\n      });\n    });\n  };\n}\n\nvar statAsync = promisify(fs.stat);\nvar readdirAsync = promisify(fs.readdir);\nvar execAsync = promisify(childProcess.exec);\n\nfunction udevParser(output) {\n  var udevInfo = output.split('\\n').reduce(function(info, line) {\n    if (!line || line.trim() === '') {\n      return info;\n    }\n    var parts = line.split('=').map(function(part) {\n      return part.trim();\n    });\n\n    info[parts[0].toLowerCase()] = parts[1];\n\n    return info;\n  }, {});\n\n  var pnpId;\n  if (udevInfo.devlinks) {\n    udevInfo.devlinks.split(' ').forEach(function(path) {\n      if (path.indexOf('/by-id/') === -1) { return }\n      pnpId = path.substring(path.lastIndexOf('/') + 1);\n    });\n  }\n\n  var vendorId = udevInfo.id_vendor_id;\n  if (vendorId && vendorId.substring(0, 2) !== '0x') {\n    vendorId = '0x' + vendorId;\n  }\n\n  var productId = udevInfo.id_model_id;\n  if (productId && productId.substring(0, 2) !== '0x') {\n    productId = '0x' + productId;\n  }\n\n  return {\n    comName: udevInfo.devname,\n    manufacturer: udevInfo.id_vendor,\n    serialNumber: udevInfo.id_serial,\n    pnpId: pnpId,\n    vendorId: vendorId,\n    productId: productId\n  };\n}\n\nfunction checkPathAndDevice(path) {\n  // get only serial port names\n  if (!(/(tty(S|ACM|USB|AMA|MFD)|rfcomm)/).test(path)) {\n    return false;\n  }\n  return statAsync(path).then(function(stats) {\n    return stats.isCharacterDevice();\n  });\n}\n\nfunction lookupPort(file) {\n  var udevadm = 'udevadm info --query=property -p $(udevadm info -q path -n ' + file + ')';\n  return execAsync(udevadm).then(udevParser);\n}\n\nfunction listUnix(callback) {\n  var dirName = '/dev';\n  readdirAsync(dirName)\n    .catch(function(err) {\n      // if this directory is not found we just pretend everything is OK\n      // TODO Depreciated this check?\n      if (err.errno === 34) {\n        return [];\n      }\n      throw err;\n    })\n    .then(function(data) { return data.map(function(file) { return path.join(dirName, file) }) })\n    .then(promisedFilter(checkPathAndDevice))\n    .then(function(data) { return Promise.all(data.map(lookupPort)) })\n    .then(function(data) { callback(null, data) }, function(err) { callback(err) });\n}\n\nmodule.exports = listUnix;\n","/home/travis/build/npmtest/node-npmtest-serialport/node_modules/serialport/lib/parsers.js":"'use strict';\n\n// Copyright 2011 Chris Williams <chris@iterativedesigns.com>\n\nmodule.exports = {\n  raw: function(emitter, buffer) {\n    emitter.emit('data', buffer);\n  },\n\n  // encoding: ascii utf8 utf16le ucs2 base64 binary hex\n  // More: http://nodejs.org/api/buffer.html#buffer_buffer\n  readline: function(delimiter, encoding) {\n    if (typeof delimiter === 'undefined' || delimiter === null) { delimiter = '\\r' }\n    if (typeof encoding === 'undefined' || encoding === null) { encoding = 'utf8' }\n    // Delimiter buffer saved in closure\n    var data = '';\n    return function(emitter, buffer) {\n      // Collect data\n      data += buffer.toString(encoding);\n      // Split collected data by delimiter\n      var parts = data.split(delimiter);\n      data = parts.pop();\n      parts.forEach(function(part) {\n        emitter.emit('data', part);\n      });\n    };\n  },\n\n  // Emit a data event every `length` bytes\n  byteLength: function(length) {\n    var data = new Buffer(0);\n    return function(emitter, buffer) {\n      data = Buffer.concat([data, buffer]);\n      while (data.length >= length) {\n        var out = data.slice(0, length);\n        data = data.slice(length);\n        emitter.emit('data', out);\n      }\n    };\n  },\n\n  // Emit a data event each time a byte sequence (delimiter is an array of byte) is found\n  // Sample usage : byteDelimiter([10, 13])\n  byteDelimiter: function(delimiter) {\n    if (Object.prototype.toString.call(delimiter) !== '[object Array]') {\n      delimiter = [ delimiter ];\n    }\n    var buf = [];\n    var nextDelimIndex = 0;\n    return function(emitter, buffer) {\n      for (var i = 0; i < buffer.length; i++) {\n        buf[buf.length] = buffer[i];\n        if (buf[buf.length - 1] === delimiter[nextDelimIndex]) {\n          nextDelimIndex++;\n        }\n        if (nextDelimIndex === delimiter.length) {\n          emitter.emit('data', buf);\n          buf = [];\n          nextDelimIndex = 0;\n        }\n      }\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-serialport/node_modules/serialport/.eslintrc.js":"module.exports = {\n  env: {\n    node: true,\n    mocha: true,\n  },\n  parserOptions: {\n    sourceType: \"script\"\n  },\n  globals: {\n    \"Promise\": false\n  },\n  rules: {\n    \"brace-style\": [2, \"1tbs\", {\"allowSingleLine\": true} ],\n    \"complexity\": [2, 32],\n    \"curly\": 2,\n    \"eqeqeq\": 2,\n    \"max-depth\": 2,\n    \"max-statements\": [2, 41],\n    \"new-cap\": 2,\n    \"no-caller\": 2,\n    \"no-cond-assign\": 2,\n    \"no-else-return\": 2,\n    \"no-undef\": 2,\n    \"no-unused-vars\": [2, { \"args\": \"after-used\" }],\n    \"no-use-before-define\": 2,\n    \"quotes\": [2, \"single\", \"avoid-escape\"],\n    \"semi\": [2, \"always\", {\"omitLastInOneLineBlock\": true }],\n    \"space-before-function-paren\": [2, \"never\"],\n    \"strict\": 2,\n    \"wrap-iife\": [2, \"inside\"]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-serialport/node_modules/serialport/bin/serialport-list.js":"#!/usr/bin/env node\n'use strict';\n\nvar serialport = require('../');\nvar version = require('../package.json').version;\nvar args = require('commander');\n\nargs\n  .version(version)\n  .description('List available serial ports')\n  .option('-f, --format <type>', 'Format the output as text, json, or jsonline. default: text', /^(text|json|jsonline)$/i, 'text')\n  .parse(process.argv);\n\nvar formatters = {\n  text: function(err, ports) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n    ports.forEach(function(port) {\n      console.log(port.comName + '\\t' + (port.pnpId || '') + '\\t' + (port.manufacturer || ''));\n    });\n  },\n  json: function(err, ports) {\n    if (err) {\n      console.error(JSON.stringify(err));\n      process.exit(1);\n    }\n    console.log(JSON.stringify(ports));\n  },\n  jsonline: function(err, ports) {\n    if (err) {\n      console.error(JSON.stringify(err));\n      process.exit(1);\n    }\n    ports.forEach(function(port) {\n      console.log(JSON.stringify(port));\n    });\n  }\n};\n\nserialport.list(formatters[args.format]);\n\n","/home/travis/build/npmtest/node-npmtest-serialport/node_modules/serialport/bin/serialport-terminal.js":"#!/usr/bin/env node\n'use strict';\n\nvar SerialPort = require('../');\nvar version = require('../package.json').version;\nvar args = require('commander');\n\nfunction makeNumber(input) {\n  return Number(input);\n}\n\nargs\n  .version(version)\n  .usage('-p <port> [options]')\n  .description('A basic terminal interface for communicating over a serial port. Pressing ctrl+c exits.')\n  .option('-l --list', 'List available ports then exit')\n  // TODO make the port not a flag as it's always required\n  .option('-p, --port, --portname <port>', 'Path or Name of serial port')\n  .option('-b, --baud <baudrate>', 'Baud rate default: 9600', makeNumber, 9600)\n  .option('--databits <databits>', 'Data bits default: 8', makeNumber, 8)\n  .option('--parity <parity>', 'Parity default: none', 'none')\n  .option('--stopbits <bits>', 'Stop bits default: 1', makeNumber, 1)\n  // TODO make this on by default\n  .option('--echo --localecho', 'Print characters as you type them.')\n  .parse(process.argv);\n\nfunction listPorts() {\n  SerialPort.list(function(err, ports) {\n    if (err) {\n      console.error('Error listing ports', err);\n    } else {\n      ports.forEach(function(port) {\n        console.log(port.comName + '\\t' + (port.pnpId || '') + '\\t' + (port.manufacturer || ''));\n      });\n    }\n  });\n};\n\nif (args.list) {\n  return listPorts();\n}\n\nif (!args.port) {\n  args.outputHelp();\n  args.missingArgument('port');\n  process.exit(-1);\n}\n\nvar openOptions = {\n  baudRate: args.baud,\n  dataBits: args.databits,\n  parity: args.parity,\n  stopBits: args.stopbits\n};\n\nvar port = new SerialPort(args.port, openOptions);\n\nprocess.stdin.resume();\nprocess.stdin.setRawMode(true);\nprocess.stdin.on('data', function(s) {\n  if (s[0] === 0x03) {\n    port.close();\n    process.exit(0);\n  }\n  if (args.localecho) {\n    if (s[0] === 0x0d) {\n      process.stdout.write('\\n');\n    } else {\n      process.stdout.write(s);\n    }\n  }\n  port.write(s);\n});\n\nport.on('data', function(data) {\n  process.stdout.write(data.toString());\n});\n\nport.on('error', function(err) {\n  console.log('Error', err);\n  process.exit(1);\n});\n"}